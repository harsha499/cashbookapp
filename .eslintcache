[{"F:\\react projects\\sapientproject\\src\\index.js":"1","F:\\react projects\\sapientproject\\src\\App.js":"2","F:\\react projects\\sapientproject\\src\\reportWebVitals.js":"3","F:\\react projects\\sapientproject\\src\\mocks\\browser.js":"4","F:\\react projects\\sapientproject\\src\\mocks\\handlers.js":"5"},{"size":565,"mtime":1609569902000,"results":"6","hashOfConfig":"7"},{"size":4722,"mtime":1612349783234,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1609569902000,"results":"9","hashOfConfig":"7"},{"size":120,"mtime":1609569902000,"results":"10","hashOfConfig":"7"},{"size":324,"mtime":1609837118000,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1ujor72",{"filePath":"15","messages":"16","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\react projects\\sapientproject\\src\\index.js",[],["24","25"],"F:\\react projects\\sapientproject\\src\\App.js",["26","27","28","29","30","31","32","33","34"],"import React, { useState, useEffect,useCallback } from 'react';\nimport Moment from 'react-moment';\nimport './App.css';\n\nfunction App() {\n\nlet [Localstate,updaterLocalstate]=useState({\n  val:0,\n  message:\"\"\n})\n\n  let [firststate,updaterstate]=useState({\n    cashbook:[\n    ],\n    totalvalue:0,\n    toggleIn:false,\n    toggleOut:false\n  })\n  let textChange=(property,event)=>{\n\n      updaterLocalstate({\n        val: property==\"val\"?event.target.value:Localstate.val,\n        message:property==\"message\"?event.target.value:Localstate.message\n      })\n  }\n\n  let ToggleClickIn=(val)=>{\n    console.log(3)\n      updaterstate({\n        cashbook:firststate.cashbook,\n        totalvalue:firststate.totalvalue,\n        toggleIn:!firststate.toggleIn,\n        toggleOut:false\n      })\n    \n  }\n\n  let EntryIn=()=>{\n    let Obj={message:Localstate.message,time:new Date().toUTCString(),InVal:Localstate.val,OutVal:0,type:\"IN\"};\n    let newState = JSON.parse(JSON.stringify(firststate)); \n    newState.toggleIn=false;\n    newState.cashbook.push(Obj)\n    \n    updaterstate({...newState})\n    updaterLocalstate({\n      val: 0,\n      message:\"\"\n    })\n    gettotalvalue(newState)\n  }\n  let EntryOut=()=>{\n    console.log(5)\n    let Obj={message:Localstate.message,time:Date(),InVal:0,OutVal:Localstate.val,type:\"OUT\"};\n    \n    let newState = JSON.parse(JSON.stringify(firststate)); \n    newState.toggleOut=false;\n    newState.cashbook.push(Obj)\n    updaterstate(newState)\n   \n    updaterLocalstate({\n      val: 0,\n      message:\"\"\n    })\n    gettotalvalue({...newState})\n  }\n  let ToggleClickout=(val)=>{\n  console.log(1)\n    updaterstate({\n      cashbook:firststate.cashbook,\n      totalvalue:firststate.totalvalue,\n      toggleIn:false,\n      toggleOut:!firststate.toggleOut\n    })\n  }\n\n\n  let gettotalvalue=(newstate)=>{\n    if(newstate.cashbook.length>0)\n    {\n      let totalvalue= newstate.cashbook.reduce((x,y)=>{\n        if(y.type==\"IN\")\n        {\n          return x+=+y.InVal\n        }\n        else\n\n        return x-=+y.OutVal\n      },0);\n      newstate.totalvalue=totalvalue\n      updaterstate({...newstate})\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <div className=\"topDiv\">\n      <div className=\"MainDiv\">\n      <div className=\"cashbookdiv\">My Cashbook</div>\n      <div className=\"balancetoday\">\n        <span className=\"green\">{firststate.totalvalue.toFixed(1) } &#8377; </span>\n        <span className=\"grey\">Todays Balance</span>\n      </div>\n    </div>\n    <div className=\"data\">\n      {\n        firststate.cashbook.length==0?<span ><p className=\"noentry\" > No ENTRY Found!</p></span>:\n        <div>\n        <table>\n          <tbody>\n        {   firststate.cashbook.map((x,y)=>{\n            return  <tr className=\"\" key={x.time}> \n              <td className=\"message\"><span>{x.time}</span><br/><span>{x.message}</span> </td>\n              <td className=\"out\"><span>Out</span><br/><span>{x.OutVal==0?\"-\" :x.OutVal }&#8377; </span>\n              </td>\n              <td className=\"in\"><span>In</span><br/><span>{x.InVal==0?\"-\":x.InVal} &#8377;</span></td>\n               </tr>\n        })\n      }\n      </tbody>\n        </table>\n        </div>\n      }\n     \n    </div>\n    <div>\n      <button  id=\"green\" onClick={()=>ToggleClickIn()} >Widraw</button>\n      <button id=\"red\" disabled={firststate.totalvalue<0} onClick={()=>ToggleClickout()} >Check-in</button>\n    </div>\n    {\n      firststate.toggleIn?\n      <div className=\"model\">\n      <div className='model-content'>\n      <span>\n        <button className=\"close-btn\" onClick={()=>ToggleClickIn(false)}>Close</button>\n      </span>\n      <h2>New Entry</h2>\n      <input type=\"number\"  min=\"0\" step=\".1\" onChange={(y)=>textChange(\"val\",y)} placeholder=\"0.00 &#8377;\"  value={Localstate.val} />\n      <textarea rows=\"10\"  onChange={(y)=>textChange(\"message\",y)} column=\"10\" placeholder=\"Enter Note\" value={Localstate.message} />\n      <button className=\"green-btn\" disabled={Localstate.val<=0} onClick={()=>EntryIn()}>IN</button>\n    </div></div>:null\n    }\n    {\n      firststate.toggleOut?\n      <div className=\"model\">\n    <div className='model-content'>\n    <span>\n      <button className=\"close-btn\" onClick={()=>ToggleClickout(false)}>Close</button>\n    </span>\n    <h2>New Entry</h2>\n    <input type=\"number\" min=\"0\" step=\".1\" onChange={(y)=>textChange(\"val\",y)} placeholder=\"0.00 &#8377;\" value={Localstate.val} />\n    <textarea rows=\"10\"  onChange={(y)=>textChange(\"message\",y)} column=\"10\" placeholder=\"Enter Note\" value={Localstate.message} />\n    <button disabled={ firststate.totalvalue<Localstate.val} className=\"red-btn\" onClick={()=>EntryOut()}>OUT</button>\n  </div></div>:null\n    }\n    </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","F:\\react projects\\sapientproject\\src\\reportWebVitals.js",[],"F:\\react projects\\sapientproject\\src\\mocks\\browser.js",[],"F:\\react projects\\sapientproject\\src\\mocks\\handlers.js",[],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":1,"column":27,"nodeType":"41","messageId":"42","endLine":1,"endColumn":36},{"ruleId":"39","severity":1,"message":"43","line":1,"column":37,"nodeType":"41","messageId":"42","endLine":1,"endColumn":48},{"ruleId":"39","severity":1,"message":"44","line":2,"column":8,"nodeType":"41","messageId":"42","endLine":2,"endColumn":14},{"ruleId":"45","severity":1,"message":"46","line":22,"column":22,"nodeType":"47","messageId":"48","endLine":22,"endColumn":24},{"ruleId":"45","severity":1,"message":"46","line":23,"column":25,"nodeType":"47","messageId":"48","endLine":23,"endColumn":27},{"ruleId":"45","severity":1,"message":"46","line":81,"column":18,"nodeType":"47","messageId":"48","endLine":81,"endColumn":20},{"ruleId":"45","severity":1,"message":"46","line":106,"column":35,"nodeType":"47","messageId":"48","endLine":106,"endColumn":37},{"ruleId":"45","severity":1,"message":"46","line":113,"column":71,"nodeType":"47","messageId":"48","endLine":113,"endColumn":73},{"ruleId":"45","severity":1,"message":"46","line":115,"column":68,"nodeType":"47","messageId":"48","endLine":115,"endColumn":70},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useCallback' is defined but never used.","'Moment' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]